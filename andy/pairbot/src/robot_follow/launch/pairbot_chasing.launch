<launch>
  <!-- these are the arguments you can pass this launch file, for example paused:=true -->
  <arg name="paused" default="false"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="gui" default="true"/>
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>
  <arg name="model" default="$(env TURTLEBOT3_MODEL)" doc="model type [burger, waffle, waffle_pi]"/>
  <!--initial pose -->
  <arg name="x" default="0"/>
  <arg name="y" default="0"/>
  <arg name="z" default="0"/>
  <arg name="roll" default="0"/>
  <arg name="pitch" default="0"/>
  <arg name="yaw" default="3.14"/>
<!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find pb_gazebo)/worlds/pairbot_test.world"/>
    <arg name="debug" value="$(arg debug)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="paused" value="$(arg paused)"/>
    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
    <arg name="headless" value="$(arg headless)"/>
  </include>
<!--
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find robot_follow)/worlds/turtlebot3_house.world"/>
    <arg name="paused" value="false"/>
    <arg name="use_sim_time" value="true"/>
    <arg name="gui" value="true"/>
    <arg name="headless" value="false"/>
    <arg name="debug" value="false"/>
  </include>
-->

	<!--                target robot           -->
	<group ns = "target">
		<param name="robot_description" command="$(find xacro)/xacro --inorder $(find turtlebot3_description)/urdf/depth_turtlebot3_burger.urdf.xacro" />
		<node pkg="gazebo_ros" type="spawn_model" name="spawn_urdf"  args="-urdf -model target -x -3 -y 3 -z 0 -param robot_description" />

		<param name="tf_prefix" value="target"/>
		<node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher" output="screen">
			<param name="publish_frequency" type="double" value="50.0" />
		</node>
	<!-- run run.cpp   -->
		<arg name="cmd_vel" default="cmd_vel"/>
  	<arg name="name" default="turtlebot3"/>
		<arg name="ns" default="target"/>

  	<param name="cmd_vel_topic_name" value="$(arg cmd_vel)"/>
		<param name="robot_width" value="0.14" />
  	<node name="$(arg name)_run" pkg="robot_follow" type="run" required="true" output="screen"/>
	
	</group>

  <!--           pairbot           -->
	<group ns = "pairbot">
  <!-- Load the URDF into the ROS Parameter Server -->
  	<param name="robot_description"
	 	command="$(find xacro)/xacro.py '$(find pb_description)/urdf/pairbot.xacro'" />
   	<param name="imu_used" value="true"/>
  <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
  	<node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
		args="-urdf -model pairbot -param robot_description -x $(arg x) -y $(arg y) -z $(arg z)
    	   -R $(arg roll) -P $(arg pitch) -Y $(arg yaw)"/>
	<!--robot_state_publisher-->
		<param name="tf_prefix" value="pairbot"/>
		<node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"
          respawn="false" output="screen">
			<param name="publish_frequency" type="double" value="50.0" />
        <!--<remap from="joint_states" to="pairbot/joint_states"/>-->
    </node>
	<!-- run follow.cpp   -->
		<arg name="cmd_vel" default="/cmd_vel"/>
  	<arg name="name" default="pairbot"/>

		<param name="taget_base_frame" value="target/base_footprint"/>
  	<param name="cmd_vel_topic_name" value="$(arg cmd_vel)"/>
		<param name="base_footprint" value="pairbot/base_link" />
		<param name="robot_width" value="0.62" />
  	<node name="$(arg name)_follow" pkg="robot_follow" type="follow" required="true" output="screen"/>
  

  <!-- ros_control eng launch file -->



	</group>
 	<include file="$(find pb_control)/launch/pb_control.launch" />
	<node name="my_stp" pkg="tf" type="static_transform_publisher" args="0 0 0 0 0 0 map pairbot/odom 20"/>
	<node name="target_stp" pkg="tf" type="static_transform_publisher" args="0 0 0 0 0 0 map target/odom 20"/>

</launch>
